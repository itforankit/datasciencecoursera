install.packages("slidify")
install.packages("ggplot2")
library(ggplot2)
search()
?
version
installed.packages(kernsmooth)
install.packages("KernSmooth")
library(KernSmooth)
find_rtools()
find_Rtools()
find_rtools()
find rtools()
find Rtools()
installed.packages(devtools)
find.package("devtools")
install.packages(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
find_rtools()
exit
quit
getwd()
myfunction <- function()
{
x=rnorm(100)
mean(x)
}
Second<-function(x)
{
x=rnorm(length(x))
}
Second()
myfunction()
Second(4)
ls
ls
getwd()
ls
getwd()
ls()
Second(4)
myfunction <- function()
{
x=rnorm(100)
mean(x)
}
Second<-function(x)
{
rnorm(length(x))
}
Second(4)
Second(4)
Second(4)
Second(4)
rnorm(length(x))
Second<-function(x)
{
rnorm(length(x))
}
Second<-function(x)
{
rnorm(length(x))
}
ls()
getpwd()
getwd()
install.packages("swirl")
package_version("swirl")
packageVersion(swirl)
library(swirl)
packageVersion(swirl)
ls
ls()
rm(list=ls())
swirl()
install_from_swirl(R Programming)
install_from_swirl("R Programming")
swirl()
5+7
quit()
swirl("R Programming")
swirl
swirl()
library(swirl)
install_from_swirl("R Programming")
swirl()
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-(z-1)^2
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
x*2+100
x*2+1000
z*2+100
(z*2+100)
(z*2+1000)
(z*2+100)
(z*2+1000)
info()
play()
nxt()
nxt
nxt()
skip()
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
ars()
args()
list.files(R.home())
args(list.files)
skip()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest3.R")
file.copy("mytest3.R","mytest3.R")
file.copy("mytest2.R","mytest3.R")
getpwd()
getwd()
file.path("mytest3.R")
skip()
?dir
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'), recursive=TRUE)
dir.create(file.path('testdir4','testdir4.1','testdir4.2'), recursive=TRUE)
setwd(old.dir)
getpwd
getpwd()
getwd()
ls()
list.files()
swirl()
library("swirl")
swirl()
!FALSE
!(0>=-1)
9<10
7!=8
FALSE||TRUE&&FALSE
99.99>100||45<7.3||4!=4.0
TRUE&&FALSE||9>=4&&3<6
TRUE&&62<62&&44>=44
6 >= -9 && !(6 > 7) && !(!TRUE)
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
isTRUE(3)
isTRUE(!TRUE)
!isTRUE(4 < 3)
xor(identical(xor, 'xor'), 7 == 7.0)
xor(4 >= 9, 8 != 8.0)
identical(xor, 'xor')
7 == 7.0
?coerce
andy[which(andy[,"Day"] == 30), "Weight"]
load(swirl)
library(swirl)
ls()
rm(list = ls())
ls()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors<-flags[,11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <-lapply(flags, unique)
unique_vals
length(unique_vals)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply(vector, index, function)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
lapply(iris$Sepal.Length, mean)
tapply(iris$Sepal.Length,iris$Species mean)
tapply(iris$Sepal,iris$Species mean)
tapply(iris$Sepal.Length,iris$Species.virginica mean)
sapply(iris, mean)
tapply(iris$Sepal.Length,iris$Species.virginica, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(iris$Sepal.Length,iris$Species.virginica, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(ls)
ls()
0
1
5
quit()
ls()
exit
q
q()
Q()
debuggingState(on=FALSE)
Q
Q()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm,col="Green")
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm,col="green",breaks = 100)
rug(ppm)
hist(ppm,col="green")
abline(v=12)
abline(v = 12, lwd=2)
abline(v = median(ppm),col="magenta", lwd=4)
names(pollution)
reg<-pollution$region
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pollution,col="red")
boxplot(data=pollution,col="red")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution)
east <- subset(pollution,region=="east")
head(east)
hist(east,col="green")
hist(east$pm25,col="green")
west <- subset(pollution,region=="west")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution,plot(latitude,pm25))
abline(h=12, lwd=2,lty=2)
plot(pollution$latitude,pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2,lty=2)
par(mfrow = c(1,
| 2), mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
?Devices
plot(eruptions, waiting)
plot(pollution,ppm)
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting,main="Old Faithful Geyser data"))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
def.off()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png, file = "geyserplot.png")
getwd()
dev.off()
setwd("C:\\Machine Learning\\ExData_Plotting1")
dataFile <- "./household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalActivePower
head(globalActivePower)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
dataFile <- "./household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
dataFile <- "./household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
datetime
head(datetime)
globalActivePower <- as.numeric(subSetData$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
dataFile <- "./household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
setwd("C:\\Machine Learning\\datasciencecoursera")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
