install.packages("slidify")
install.packages("ggplot2")
library(ggplot2)
search()
?
version
installed.packages(kernsmooth)
install.packages("KernSmooth")
library(KernSmooth)
find_rtools()
find_Rtools()
find_rtools()
find rtools()
find Rtools()
installed.packages(devtools)
find.package("devtools")
install.packages(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
find_rtools()
exit
quit
getwd()
myfunction <- function()
{
x=rnorm(100)
mean(x)
}
Second<-function(x)
{
x=rnorm(length(x))
}
Second()
myfunction()
Second(4)
ls
ls
getwd()
ls
getwd()
ls()
Second(4)
myfunction <- function()
{
x=rnorm(100)
mean(x)
}
Second<-function(x)
{
rnorm(length(x))
}
Second(4)
Second(4)
Second(4)
Second(4)
rnorm(length(x))
Second<-function(x)
{
rnorm(length(x))
}
Second<-function(x)
{
rnorm(length(x))
}
ls()
getpwd()
getwd()
install.packages("swirl")
package_version("swirl")
packageVersion(swirl)
library(swirl)
packageVersion(swirl)
ls
ls()
rm(list=ls())
swirl()
install_from_swirl(R Programming)
install_from_swirl("R Programming")
swirl()
5+7
quit()
swirl("R Programming")
swirl
swirl()
library(swirl)
install_from_swirl("R Programming")
swirl()
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-(z-1)^2
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
x*2+100
x*2+1000
z*2+100
(z*2+100)
(z*2+1000)
(z*2+100)
(z*2+1000)
info()
play()
nxt()
nxt
nxt()
skip()
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
ars()
args()
list.files(R.home())
args(list.files)
skip()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest3.R")
file.copy("mytest3.R","mytest3.R")
file.copy("mytest2.R","mytest3.R")
getpwd()
getwd()
file.path("mytest3.R")
skip()
?dir
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'), recursive=TRUE)
dir.create(file.path('testdir4','testdir4.1','testdir4.2'), recursive=TRUE)
setwd(old.dir)
getpwd
getpwd()
getwd()
ls()
list.files()
swirl()
library("swirl")
swirl()
!FALSE
!(0>=-1)
9<10
7!=8
FALSE||TRUE&&FALSE
99.99>100||45<7.3||4!=4.0
TRUE&&FALSE||9>=4&&3<6
TRUE&&62<62&&44>=44
6 >= -9 && !(6 > 7) && !(!TRUE)
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
isTRUE(3)
isTRUE(!TRUE)
!isTRUE(4 < 3)
xor(identical(xor, 'xor'), 7 == 7.0)
xor(4 >= 9, 8 != 8.0)
identical(xor, 'xor')
7 == 7.0
?coerce
andy[which(andy[,"Day"] == 30), "Weight"]
load(swirl)
library(swirl)
ls()
rm(list = ls())
ls()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors<-flags[,11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <-lapply(flags, unique)
unique_vals
length(unique_vals)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply(vector, index, function)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
lapply(iris$Sepal.Length, mean)
tapply(iris$Sepal.Length,iris$Species mean)
tapply(iris$Sepal,iris$Species mean)
tapply(iris$Sepal.Length,iris$Species.virginica mean)
sapply(iris, mean)
tapply(iris$Sepal.Length,iris$Species.virginica, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(iris$Sepal.Length,iris$Species.virginica, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(ls)
ls()
0
1
5
quit()
ls()
exit
q
q()
Q()
debuggingState(on=FALSE)
Q
Q()
setwd("C:\\Machine Learning\\datasciencecoursera")
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
month(this_day)
day(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment<-now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
my_date<-ymd("1989 May 17")
my_date<-ymd("1989-05-17")
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd_hms(dt2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment,hms(now()))
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <-(now(),tz="America/New_York")
nyc <-(now(),tz="America/New_York")
nyc <-(now,tz="America/New_York")
nyc <-(now(),tz="America/New_York")
?now
nyc <-now(tz="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 55)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?Sys.timezone
Sys.timezone
Sys.timezone()
?with_tz
arrive <- with_tz(arive,tzone ="Hong Kong" )
arrive <- with_tz(arive,tzone ="HKT" )
arrive <- with_tz(arive,tzone ="Asia/Hong_Kong" )
arrive <- depart + hours(15) + minutes(50)
with_tz(arrive, "Asia/Hong_Kong")
arrive
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tx="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
? interval
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
setwd("C:\\Machine Learning\\datasciencecoursera\C3Q4")
setwd("C:\\Machine Learning\\datasciencecoursera\\C3Q4")
setwd("C:\\Machine Learning\\datasciencecoursera")
if(!file.exists(".\C3Q4")){dir.create(".\C3Q4")}
if(!file.exists(".\\C3Q4")){dir.create(".\\C3Q4")}
if(!file.exists(".\\C3Q4_del")){dir.create(".\\C3Q4-del")}
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,dest=".//C3Q4")
download.file(fileUrl,dest=".//C3Q4//C3Q4Q1.CSV")
QData<-read.csv(".//C3Q4//C3Q4Q1.CSV")
head(QData)
splitNames <- strsplit(names(QData),"wgtp")
splitNames[[5]]
splitNames[[123]]
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,dest=".//C3Q4//C3Q4Q2.CSV")
QData2<-read.csv(".//C3Q4//C3Q4Q2.CSV")
head(QData2)
names(QData2)
gsub(",","",QData2)
avg<-summarize(gsub(",","",QData2), mean())
gdp <- as.numeric(gsub(",", "", QData2$Gross.domestic.product.2012))
gdp <- as.numeric(gsub(",", "", QData2$Gross.domestic.product.2012), na.rm=TRUE)
class(QData2)
library(dplyr)
tblData2<-tbl_df(QData2)
tblData2
tblData2<-filter(tblData2, X != "")
tblData2
gdp <- as.numeric(gsub(",", "", tblData2$X.3), na.rm=TRUE)
gdp
mean(gdp,na.rm=TRUE)
gdp <- as.numeric(gsub(",", "", tblData2$X.4), na.rm=TRUE)
mean(gdp,na.rm=TRUE)
tblData2<-tbl_df(QData2)
tblData2
tblData2<-filter(tblData2, X != "")
gdp <- as.numeric(gsub(",", "", tblData2$X.4), na.rm=TRUE)
mean(gdp,na.rm=TRUE)
gdp <- as.numeric(gsub(",", "", tblData2$X.3), na.rm=TRUE)
mean(gdp,na.rm=TRUE)
nrows(tblData2)
tblData2
tblData2<-filter(tblData2, Gross.domestic.product.2012 >=1 & Gross.domestic.product.2012<191)
tblData2<-filter(tblData2, Gross.domestic.product.2012 >0 & Gross.domestic.product.2012<191)
tblData2
tblData2<-tbl_df(QData2)
tblData2<-filter(tblData2, X != "")
tblData2<-filter(tblData2, Gross.domestic.product.2012 >0 , Gross.domestic.product.2012<191)
tblData2<-filter(tblData2, Gross.domestic.product.2012 >=1 , Gross.domestic.product.2012<=190)
tblData2
tblData2<-tbl_df(QData2)
tblData2
tblData2<-filter(tblData2, X != "")
tblData2
tblData2<-filter(tblData2, Gross.domestic.product.2012 >=1 , Gross.domestic.product.2012<=190)
tblData2<-tbl_df(QData2)
tblData2<-filter(tblData2, X != "")
tblData2<-filter(tblData2, Gross.domestic.product.2012 !="")
tblData2
gdp <- as.numeric(gsub(",", "", tblData2$X.3), na.rm=TRUE)
mean(gdp,na.rm=TRUE)
isUnited <- grepl("^United", tblData2$Long.Name)
isUnited <- grepl("^United", tblData2$X.2)
summary(isUnited)
fileUrl1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl1,dest=".//C3Q4//C3Q4Q4.CSV")
QData4<-read.csv(".//C3Q4//C3Q4Q4.CSV")
download.file(fileUrl1,dest=".//C3Q4//C3Q4Q4.CSV")
QData4<-read.csv(".//C3Q4//C3Q4Q4.CSV")
tblData3<-tbl_df(QData4)
dtMerge<- merge(tblData2,tblData3,all="TRUE", by=c("CountryCode"))
tblData3
dtMerge<- merge(tblData2,tblData3,all="TRUE", by=c("CountryCode"))
setnames(tblData2, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp")
setnames(tblData2, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
setnames(tblData2, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
setNames(tblData2, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
tblData2
setNames(tblData2, c("X"), c("CountryCode"))
